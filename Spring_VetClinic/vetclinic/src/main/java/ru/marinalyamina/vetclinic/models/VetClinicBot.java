package ru.marinalyamina.vetclinic.models;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.marinalyamina.vetclinic.models.dtos.CreateAnimalScheduleDTO;
import ru.marinalyamina.vetclinic.models.dtos.ScheduleDTO;
import ru.marinalyamina.vetclinic.models.entities.*;
import ru.marinalyamina.vetclinic.services.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class VetClinicBot extends TelegramLongPollingBot {

    private final ClientService clientService;
    private final EmployeeService employeeService;
    private final AnimalService animalService;
    private final ScheduleService scheduleService;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private final Map<Long, ScheduleData> schedulingSessions = new ConcurrentHashMap<>();

    public VetClinicBot(ClientService clientService, EmployeeService employeeService,
                        AnimalService animalService, ScheduleService scheduleService) {
        this.clientService = clientService;
        this.employeeService = employeeService;
        this.animalService = animalService;
        this.scheduleService = scheduleService;
    }

    @Value("${telegrambots.bots[0].token}")
    private String botToken;

    @Value("${telegrambots.bots[0].username}")
    private String botUsername;

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @PostConstruct
    public void init() {
        System.out.println("=== VetClinicBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ===");
        System.out.println("Bot username: " + botUsername);
        System.out.println("Bot token: " + (botToken != null ? "–µ—Å—Ç—å" : "null"));
        System.out.println("===============================");
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleTextMessage(update);
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update);
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleTextMessage(Update update) {
        String messageText = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();

        if (messageText.startsWith("/–∫–æ–¥")) {
            handleTelegramLinking(messageText, chatId);
        } else if (messageText.equals("/start")) {
            handleStart(chatId);
        } else if (messageText.equals("/–∑–∞–ø–∏—Å—å")) {
            startSchedulingProcess(chatId);
        } else {
            // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
            if (!isClientLinked(chatId)) {
                sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /–∫–æ–¥ –í–ê–®_–ö–û–î");
                return;
            }
            sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º");
        }
    }

    private void handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();

        System.out.println("–ü–æ–ª—É—á–µ–Ω callback: " + callbackData + " –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + chatId);

        try {
            if (callbackData.startsWith("doctor_")) {
                removeInlineKeyboard(update.getCallbackQuery());
                long doctorId = Long.parseLong(callbackData.replace("doctor_", ""));
                selectDoctor(chatId, doctorId);
            } else if (callbackData.startsWith("date_")) {
                removeInlineKeyboard(update.getCallbackQuery());
                String dateStr = callbackData.replace("date_", "");
                selectDate(chatId, dateStr);
            } else if (callbackData.startsWith("time_")) {
                removeInlineKeyboard(update.getCallbackQuery());
                long scheduleId = Long.parseLong(callbackData.replace("time_", ""));
                selectTimeSlot(chatId, scheduleId);
            } else if (callbackData.startsWith("pet_")) {
                removeInlineKeyboard(update.getCallbackQuery());
                long petId = Long.parseLong(callbackData.replace("pet_", ""));
                selectPet(chatId, petId);
            } else if (callbackData.equals("confirm_yes")) {
                removeInlineKeyboard(update.getCallbackQuery());
                confirmScheduling(chatId);
            } else if (callbackData.equals("confirm_no")) {
                removeInlineKeyboard(update.getCallbackQuery());
                cancelScheduling(chatId);
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: " + e.getMessage());
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–∑–∞–ø–∏—Å—å");
        }
    }

    private void handleTelegramLinking(String messageText, long chatId) {
        String code = messageText.substring(4).trim();

        Optional<Client> clientOpt = clientService.findByTelegramLinkCode(code);
        if (clientOpt.isPresent()) {
            Client client = clientOpt.get();
            client.setTelegramChatId(chatId);
            client.setTelegramLinkCode(null);
            clientService.update(client);

            sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ Telegram –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!\n\n" +
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /–∑–∞–ø–∏—Å—å");
        } else {
            sendMessage(chatId, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.");
        }
    }

    private void handleStart(long chatId) {
        if (isClientLinked(chatId)) {
            sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—É—é –∫–ª–∏–Ω–∏–∫—É!\n\n" +
                    "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–∑–∞–ø–∏—Å—å");
        } else {
            sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—É—é –∫–ª–∏–Ω–∏–∫—É!\n\n" +
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "/–∫–æ–¥ –í–ê–®_–ö–û–î\n\n" +
                    "–ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ.");
        }
    }

    private void startSchedulingProcess(long chatId) {
        if (!isClientLinked(chatId)) {
            sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /–∫–æ–¥ –í–ê–®_–ö–û–î");
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedulingSessions.put(chatId, new ScheduleData());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
        showDoctors(chatId);
    }

    private void showDoctors(long chatId) {
        List<Employee> doctors = employeeService.getAll();

        if (doctors.isEmpty()) {
            sendMessage(chatId, "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π.");
            return;
        }

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üë®‚Äç‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Employee doctor : doctors) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(doctor.getUser().getFIO() + " - " + doctor.getPosition().getName());
            button.setCallbackData("doctor_" + doctor.getId());
            row.add(button);
            rows.add(row);
        }

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void selectDoctor(long chatId, long doctorId) {
        ScheduleData scheduleData = schedulingSessions.get(chatId);
        if (scheduleData == null) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–∑–∞–ø–∏—Å—å");
            return;
        }

        Optional<Employee> doctorOpt = employeeService.getById(doctorId);
        if (doctorOpt.isEmpty()) {
            sendMessage(chatId, "‚ùå –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        scheduleData.setDoctor(doctorOpt.get());
        showAvailableDates(chatId, doctorId);
    }

    private void showAvailableDates(long chatId, long doctorId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–∞—á–∞
        List<ScheduleDTO> schedules = scheduleService.getEmployeeFreeSchedules(doctorId);

        if (schedules.isEmpty()) {
            sendMessage(chatId, "‚ùå –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ —Å–ª–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π)
        LocalDate today = LocalDate.now();
        Set<LocalDate> availableDates = new HashSet<>();

        for (ScheduleDTO schedule : schedules) {
            LocalDate scheduleDate = schedule.getDate().toLocalDate();
            if (!scheduleDate.isBefore(today) && scheduleDate.isBefore(today.plusDays(8))) {
                availableDates.add(scheduleDate);
            }
        }

        if (availableDates.isEmpty()) {
            sendMessage(chatId, "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π.");
            return;
        }

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<LocalDate> sortedDates = new ArrayList<>(availableDates);
        sortedDates.sort(LocalDate::compareTo);

        for (LocalDate date : sortedDates) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();

            String dateText = date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
            if (date.equals(today)) {
                dateText += " (—Å–µ–≥–æ–¥–Ω—è)";
            } else if (date.equals(today.plusDays(1))) {
                dateText += " (–∑–∞–≤—Ç—Ä–∞)";
            }

            button.setText(dateText);
            button.setCallbackData("date_" + date.toString());
            row.add(button);
            rows.add(row);
        }

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void selectDate(long chatId, String dateStr) {
        ScheduleData scheduleData = schedulingSessions.get(chatId);
        if (scheduleData == null || scheduleData.getDoctor() == null) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–∑–∞–ø–∏—Å—å");
            return;
        }

        LocalDate selectedDate = LocalDate.parse(dateStr);
        scheduleData.setSelectedDate(selectedDate);

        showAvailableTimeSlots(chatId, scheduleData.getDoctor().getId(), selectedDate);
    }

    private void showAvailableTimeSlots(long chatId, long doctorId, LocalDate date) {
        List<ScheduleDTO> schedules = scheduleService.getEmployeeFreeSchedules(doctorId);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        List<ScheduleDTO> dateSchedules = schedules.stream()
                .filter(s -> s.getDate().toLocalDate().equals(date))
                .sorted((s1, s2) -> s1.getDate().compareTo(s2.getDate()))
                .toList();

        if (dateSchedules.isEmpty()) {
            sendMessage(chatId, "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.");
            return;
        }

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (ScheduleDTO schedule : dateSchedules) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();

            String timeText = schedule.getDate().format(DateTimeFormatter.ofPattern("HH:mm"));
            button.setText(timeText);
            button.setCallbackData("time_" + schedule.getId());
            row.add(button);
            rows.add(row);
        }

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void selectTimeSlot(long chatId, long scheduleId) {
        System.out.println("selectTimeSlot: chatId=" + chatId + ", scheduleId=" + scheduleId);

        System.out.println("== –í–´–ë–û–† –í–†–ï–ú–ï–ù–ò ===");
        System.out.println("chatId: " + chatId);
        System.out.println("scheduleId: " + scheduleId);
        System.out.println("schedulingSessions: " + schedulingSessions.keySet());


        ScheduleData scheduleData = schedulingSessions.get(chatId);
        if (scheduleData == null) {
            System.out.println("scheduleData is null!");
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–∑–∞–ø–∏—Å—å");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∏—Ç–æ–º—Ü–∞
        scheduleData.setScheduleId(scheduleId);
        System.out.println("scheduleId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + scheduleId + ", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∏—Ç–æ–º—Ü–∞");
        showPetSelection(chatId);
    }

    private void showPetSelection(long chatId) {
        System.out.println("showPetSelection –≤—ã–∑–≤–∞–Ω –¥–ª—è chatId: " + chatId);

        Client client = clientService.findWithAnimalsByTelegramChatId(chatId).orElse(null);
        if (client == null) {
            sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏.");
            return;
        }

        List<Animal> pets = client.getAnimals();

        System.out.println("–ù–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: " + pets.size());

        if (pets.isEmpty()) {
            sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–ª–∏–Ω–∏–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
            return;
        }

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üêæ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Animal pet : pets) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(pet.getName());
            button.setCallbackData("pet_" + pet.getId());
            row.add(button);
            rows.add(row);
        }

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
            System.out.println("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–∏—Ç–æ–º—Ü–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void selectPet(long chatId, long petId) {
        ScheduleData scheduleData = schedulingSessions.get(chatId);
        if (scheduleData == null) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–∑–∞–ø–∏—Å—å");
            return;
        }

        Optional<Animal> petOpt = animalService.findWithSchedulesById(petId);
        if (petOpt.isEmpty()) {
            sendMessage(chatId, "‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        scheduleData.setPet(petOpt.get());
        showConfirmation(chatId);
    }

    private void showConfirmation(long chatId) {
        ScheduleData scheduleData = schedulingSessions.get(chatId);
        if (scheduleData == null || !scheduleData.isComplete()) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–∑–∞–ø–∏—Å—å");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å–ª–æ—Ç–∞
        Optional<Schedule> scheduleOpt = scheduleService.getById(scheduleData.getScheduleId());
        if (scheduleOpt.isEmpty()) {
            sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞.");
            return;
        }

        String dateTimeStr = scheduleOpt.get().getDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));

        String confirmText = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n" +
                "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: " + scheduleData.getDoctor().getUser().getFIO() + "\n" +
                "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: " + dateTimeStr + "\n" +
                "üêæ –ü–∏—Ç–æ–º–µ—Ü: " + scheduleData.getPet().getName() + "\n\n" +
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?";

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(confirmText);

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton yesButton = new InlineKeyboardButton();
        yesButton.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        yesButton.setCallbackData("confirm_yes");

        InlineKeyboardButton noButton = new InlineKeyboardButton();
        noButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        noButton.setCallbackData("confirm_no");

        row.add(yesButton);
        row.add(noButton);
        rows.add(row);

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }


    private void confirmScheduling(long chatId) {
        ScheduleData scheduleData = schedulingSessions.get(chatId);
        if (scheduleData == null || !scheduleData.isComplete()) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏.");
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            CreateAnimalScheduleDTO dto = new CreateAnimalScheduleDTO();
            dto.setAnimalId(scheduleData.getPet().getId());
            dto.setScheduleId(scheduleData.getScheduleId());

            scheduleService.createAnimalSchedule(dto);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
            Schedule schedule = scheduleService.getById(scheduleData.getScheduleId())
                    .orElseThrow(() -> new RuntimeException("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ª–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"));

            String dateTimeStr = schedule.getDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));

            String confirmationText = "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n" +
                    "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: " + scheduleData.getDoctor().getUser().getFIO() + "\n" +
                    "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: " + dateTimeStr + "\n" +
                    "üêæ –ü–∏—Ç–æ–º–µ—Ü: " + scheduleData.getPet().getName() + "\n\n" +
                    "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –ø—Ä–∏–µ–º–∞.";

            sendMessage(chatId, confirmationText);
            schedulingSessions.remove(chatId);

        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: " + e.getMessage());
            e.printStackTrace();
        }
    }


    private void cancelScheduling(long chatId) {
        schedulingSessions.remove(chatId);
        sendMessage(chatId, "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    }

    private boolean isClientLinked(long chatId) {
        return clientService.findByTelegramChatId(chatId).isPresent();
    }

    private Client getClientByChatId(long chatId) {
        return clientService.findByTelegramChatId(chatId).orElse(null);
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void sendMessageToChat(Long chatId, String text) {
        if (chatId == null) return;
        sendMessage(chatId, text);
    }

    private void removeInlineKeyboard(CallbackQuery callbackQuery) {
        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setChatId(callbackQuery.getMessage().getChatId().toString());
        editMarkup.setMessageId(callbackQuery.getMessage().getMessageId());
        editMarkup.setReplyMarkup(null); // —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        try {
            execute(editMarkup);
        } catch (TelegramApiException e) {
            System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: " + e.getMessage());
        }
    }


    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    private static class ScheduleData {
        private Employee doctor;
        private LocalDate selectedDate;
        private Long scheduleId;
        private Animal pet;

        public boolean isComplete() {
            return doctor != null && selectedDate != null && scheduleId != null && pet != null;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        public Employee getDoctor() { return doctor; }
        public void setDoctor(Employee doctor) { this.doctor = doctor; }

        public LocalDate getSelectedDate() { return selectedDate; }
        public void setSelectedDate(LocalDate selectedDate) { this.selectedDate = selectedDate; }

        public Long getScheduleId() { return scheduleId; }
        public void setScheduleId(Long scheduleId) { this.scheduleId = scheduleId; }

        public Animal getPet() { return pet; }
        public void setPet(Animal pet) { this.pet = pet; }
    }
}