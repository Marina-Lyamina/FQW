package ru.marinalyamina.vetclinic.services;

import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import ru.marinalyamina.vetclinic.models.VetClinicBot;
import ru.marinalyamina.vetclinic.models.entities.Schedule;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Service
@RequiredArgsConstructor
public class TelegramReminderService {

    private final Object lock = new Object();
    private final ScheduleService scheduleService;
    private final VetClinicBot vetClinicBot;

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    private final Set<String> sentHourReminders = new HashSet<>();
    private final Set<String> sentDayReminders = new HashSet<>();

    @Scheduled(fixedRate = 60000) // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void checkUpcomingAppointments() {
        synchronized (lock) {
            LocalDateTime now = LocalDateTime.now().withSecond(0).withNano(0);
            LocalDateTime inOneHour = now.plusHours(1);
            LocalDateTime inOneDay = now.plusDays(1);

            List<Schedule> schedules = scheduleService.getAllWithAnimal();

            for (Schedule schedule : schedules) {
                LocalDateTime visitTime = schedule.getDate().withSecond(0).withNano(0);
                String scheduleKey = generateScheduleKey(schedule);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å (—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)
                if (visitTime.equals(inOneHour)) {
                    if (!sentHourReminders.contains(scheduleKey)) {
                        sendReminder(schedule, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü—Ä–∏–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å");
                        sentHourReminders.add(scheduleKey);
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å (—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)
                else if (visitTime.equals(inOneDay)) {
                    if (!sentDayReminders.contains(scheduleKey)) {
                        sendReminder(schedule, "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü—Ä–∏–µ–º –∑–∞–≤—Ç—Ä–∞");
                        sentDayReminders.add(scheduleKey);
                    }
                }
            }

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π)
            cleanupOldReminders();
        }
    }

    private String generateScheduleKey(Schedule schedule) {
        return schedule.getId() + "_" + schedule.getDate().toString();
    }

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
    @Scheduled(fixedRate = 3600000)
    public void cleanupOldReminders() {
        synchronized (lock) {
            LocalDateTime twoDaysAgo = LocalDateTime.now().minusDays(2);

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –≤–∏–∑–∏—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π
            sentHourReminders.removeIf(key -> {
                try {
                    String dateStr = key.split("_", 2)[1];
                    LocalDateTime scheduleDate = LocalDateTime.parse(dateStr);
                    return scheduleDate.isBefore(twoDaysAgo);
                } catch (Exception e) {
                    return true; // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                }
            });

            sentDayReminders.removeIf(key -> {
                try {
                    String dateStr = key.split("_", 2)[1];
                    LocalDateTime scheduleDate = LocalDateTime.parse(dateStr);
                    return scheduleDate.isBefore(twoDaysAgo);
                } catch (Exception e) {
                    return true; // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                }
            });
        }
    }

    private void sendReminder(Schedule schedule, String prefix) {
        var animal = schedule.getAnimal();
        if (animal == null) return;

        var client = animal.getClient();
        if (client == null || client.getTelegramChatId() == null) return;

        var employee = schedule.getEmployee();
        var employeeUser = employee.getUser();

        String formattedDateTime = schedule.getDate()
                .format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy '–≤' HH:mm"));

        String message = prefix + "\n" +
                "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: " + formattedDateTime + "\n" +
                "üêæ –ü–∏—Ç–æ–º–µ—Ü: " + animal.getName() + "\n" +
                "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: " + employeeUser.getFIOAbbreviated() + " (" + employee.getPosition().getName() + ")";

        vetClinicBot.sendMessageToChat(client.getTelegramChatId(), message);
    }


}